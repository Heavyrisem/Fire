{"version":3,"sources":["component/Particle.tsx","component/Utils.tsx","component/Fire.tsx","component/FPS.tsx","component/Setting.tsx","component/Main.tsx","reportWebVitals.ts","index.tsx"],"names":["temp_to_kelvin","temp","kelvinToHEX","red","blue","green","Math","pow","log","floor","toString","substr","Particle","size","position","rotate","shape","x","y","speed","color","this","map","v","PI","random","randn_bm","min","max","skew","deg","u","num","sqrt","cos","Fire","props","Canvas","useRef","Particles","ReqFrame","Cycle","current","i","MaxParticles","length","Pos","width","height","push","Update","splice","Calculate","context","getContext","globalCompositeOperation","Filter","clearRect","P","save","beginPath","translate","moveTo","lineTo","fillStyle","shadowColor","shadowBlur","fill","closePath","restore","Render","requestAnimationFrame","console","useEffect","cancelAnimationFrame","className","ref","document","body","clientWidth","clientHeight","FPS","useState","fps","setFps","Perf","performance","now","Counter","delta","toFixed","Setting","type","defaultValue","onChange","e","setMaxParticles","parseInt","target","value","setFilter","style","textAlign","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.beaf6121.chunk.js","sourcesContent":["class Particle {\r\n    temp: number;\r\n    size: number;\r\n    x: number = 0;\r\n    y: number = 0;\r\n    rotate: number = 0;\r\n    shape: number = 1;\r\n    speed: number = 0;\r\n    color: string = \"#ffffff\";\r\n\r\n    constructor(temp: number, size: number, position?: {x: number, y:number}, rotate?: number, shape?: number) {\r\n        this.temp = temp;\r\n        this.size = size;\r\n        this.color = kelvinToHEX(temp_to_kelvin(this.temp))+(\"0\" + Math.floor(150).toString(16)).substr(-2);\r\n        \r\n        position&& ( [this.x, this.y] = [position.x, position.y].map(v => (Math.floor(v)) ) );\r\n        rotate&& (this.rotate = rotate * Math.PI / 180);\r\n        shape&& (this.shape = Math.floor(shape));\r\n\r\n        this.speed = Math.floor( Math.random() * 2 + 1 );\r\n    }\r\n\r\n    Update() {\r\n        this.size -= this.speed;\r\n        this.y -= this.speed;\r\n        this.temp -= this.speed * 10;\r\n        this.color = kelvinToHEX(temp_to_kelvin(this.temp))+(\"0\" + Math.floor(150).toString(16)).substr(-2);\r\n    }\r\n\r\n    SetTemp(temp: number) {\r\n        this.temp = temp;\r\n        this.color = kelvinToHEX(temp_to_kelvin(temp))+(\"0\" + Math.floor(150).toString(16)).substr(-2);\r\n    }\r\n}\r\n\r\n  \r\nfunction temp_to_kelvin(temp: number) {\r\n    return temp + 273.15;\r\n}\r\n\r\nfunction kelvinToHEX (temp: number) {\r\n  \r\n    temp = temp / 100\r\n    var red, blue, green\r\n  \r\n    if (temp <= 66) {\r\n      red = 255\r\n    } else {\r\n      red = temp - 60\r\n      red = 329.698727466 * Math.pow(red, -0.1332047592)\r\n      if (red < 0) {\r\n        red = 0\r\n      }\r\n      if (red > 255) {\r\n        red = 255\r\n      }\r\n    }\r\n  \r\n    if (temp <= 66) {\r\n      green = temp\r\n      green = 99.4708025861 * Math.log(green) - 161.1195681661\r\n      if (green < 0) {\r\n        green = 0\r\n      }\r\n      if (green > 255) {\r\n        green = 255\r\n      }\r\n    } else {\r\n      green = temp - 60\r\n      green = 288.1221695283 * Math.pow(green, -0.0755148492)\r\n      if (green < 0) {\r\n        green = 0\r\n      }\r\n      if (green > 255) {\r\n        green = 255\r\n      }\r\n    }\r\n  \r\n    if (temp >= 66) {\r\n      blue = 255\r\n    } else {\r\n      if (temp <= 19) {\r\n        blue = 0\r\n      } else {\r\n        blue = temp - 10\r\n        blue = 138.5177312231 * Math.log(blue) - 305.0447927307\r\n        if (blue < 0) {\r\n          blue = 0\r\n        }\r\n        if (blue > 255) {\r\n          blue = 255\r\n        }\r\n      }\r\n    }\r\n  \r\n    return \"#\"\r\n    + (\"0\" + Math.floor(red).toString(16)).substr(-2)\r\n    + (\"0\" + Math.floor(green).toString(16)).substr(-2)\r\n    + (\"0\" + Math.floor(blue).toString(16)).substr(-2);\r\n  }\r\n\r\nexport default Particle;","\r\nexport function randn_bm(min: number, max: number, skew: number, deg: number = 2) {\r\n    let u = 0, v = 0;\r\n    while(u === 0) u = Math.random() //Converting [0,1) to (0,1)\r\n    while(v === 0) v = Math.random()\r\n    let num = Math.sqrt( -deg * Math.log( u ) ) * Math.cos( deg * Math.PI * v )\r\n    \r\n    num = num / 10.0 + 0.5 // Translate to 0 -> 1\r\n    if (num > 1 || num < 0) \r\n        num = randn_bm(min, max, skew, deg) // resample between 0 and 1 if out of range\r\n    \r\n    else{\r\n        num = Math.pow(num, skew) // Skew\r\n        num *= max - min // Stretch to fill range\r\n        num += min // offset to min\r\n    }\r\n    return num\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport '../style/Fire.css';\r\nimport Particle from \"./Particle\";\r\nimport { randn_bm } from \"./Utils\";\r\n\r\n\r\ninterface Fire_P {\r\n    MaxParticles: number\r\n    Filter: string\r\n}\r\nfunction Fire(props: Fire_P) {\r\n    const Canvas = useRef<HTMLCanvasElement>(null);\r\n    // const [Particles, setParticles] = useState<Array<Particle>>([]);\r\n    let Particles: Array<Particle> = [];\r\n    let ReqFrame = -1;\r\n\r\n    useEffect(() => {\r\n        if (!Canvas.current) return console.log(\"errr\");\r\n\r\n        // for (let i = 0; i <= MaxParticles; i++) {\r\n        //     let Pos = {x: randn_bm(Canvas.current.width / 6, Canvas.current.width / 6 * 5, 1), y: randn_bm(Canvas.current.height / 7 * 6, Canvas.current.height / 7, 2, 10)};\r\n        //     Particles.push(new Particle(randn_bm(725, 2000, 1.3, 20), randn_bm(10, 150, .3), Pos, Math.random() * 360, Math.random() * 3 + 1))\r\n        // }\r\n        // console.log(Particles)\r\n        if (ReqFrame >= 0) cancelAnimationFrame(ReqFrame);\r\n        ReqFrame = requestAnimationFrame(Cycle);\r\n        \r\n        // setInterval(Cycle, 1000);\r\n    }, [props]);\r\n\r\n    function Cycle() {\r\n        Calculate();\r\n        Render();\r\n        if (Particles.length) requestAnimationFrame(Cycle);\r\n        else console.log(\"End\")\r\n    }\r\n\r\n    function Calculate() {\r\n        if (!Canvas.current) return;\r\n        for (let i = 0; i < props.MaxParticles - Particles.length; i++) {\r\n            // if (i >= 1) break;\r\n            let Pos = {x: randn_bm(Canvas.current.width / 4, Canvas.current.width / 4 * 3, 1), y: randn_bm(Canvas.current.height / 7 * 6, Canvas.current.height / 7, 2.5, 10)};\r\n            Particles.push(new Particle(randn_bm(725, 2000, 1.3, 20), randn_bm(10, 150, .3), Pos, Math.random() * 360, Math.random() * 3 + 1))\r\n        }\r\n\r\n        for (let i = 0; i < Particles.length; i++) {\r\n            Particles[i].Update();\r\n            if (Particles[i].size <= 0) Particles.splice(i, 1);\r\n            // let P = Particles[i];\r\n\r\n            // if ((P.size -= P.speed) <= 0) {\r\n            //     Particles.splice(i, 1);\r\n            //     P.y -= P.speed;\r\n            //     P.temp -= P.speed * 10\r\n            // } else Particles[i] = P;\r\n        }\r\n    }\r\n\r\n    function Render() {\r\n        if (!(Particles.length && Canvas.current)) return;\r\n\r\n        let context = Canvas.current.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        context.globalCompositeOperation = props.Filter;\r\n        context.clearRect(0, 0, Canvas.current.width, Canvas.current.height);\r\n        for (let i = 0; i < Particles.length; i++) {\r\n            let P = Particles[i];\r\n            \r\n            context.save();\r\n            context.beginPath();\r\n            // context.arc(0, 0, 5, 0, 2 * Math.PI);\r\n            // context.fillStyle = 'blue';\r\n            // context.fill();\r\n            \r\n            \r\n            context.translate(P.x + P.size/2, P.y + P.size/2);\r\n\r\n            // context.font = '11px serif';\r\n            // context.strokeStyle = 'white';\r\n            // context.strokeText(P.color, 0, 0);\r\n\r\n            context.rotate(P.rotate);\r\n            context.translate((P.x + P.size/2) * -1, (P.y + P.size/2) * -1);\r\n            \r\n            // context.rect(P.x,P.y,P.size,P.size);\r\n            context.moveTo(P.x, P.y);\r\n            context.lineTo(P.x+P.size, P.y);\r\n            context.lineTo(P.x+(P.size/2), P.y+(P.size/P.shape));\r\n            \r\n\r\n            context.fillStyle = P.color;\r\n            context.shadowColor = P.color;\r\n            context.shadowBlur = 5;\r\n\r\n            context.fill();\r\n            context.closePath();\r\n            context.restore();\r\n            // console.log(P);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <canvas className=\"Fire\" ref={Canvas} width={document.body.clientWidth} height={document.body.clientHeight}>\r\n\r\n        </canvas>\r\n    )\r\n}\r\n\r\nexport default Fire;","import React, { useEffect, useState } from 'react';\r\n\r\nfunction FPS() {\r\n    const [fps, setFps] = useState(\"\");\r\n    let Perf = performance.now();\r\n\r\n    useEffect(Counter, []);\r\n\r\n    function Counter() {\r\n        let delta = (performance.now() - Perf) / 1000;\r\n        Perf = performance.now();\r\n\r\n        setFps((1/delta).toFixed(2));\r\n        requestAnimationFrame(Counter);\r\n    }\r\n\r\n    return (\r\n        <span className=\"FPS\">\r\n            {fps}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default FPS;","import React from \"react\";\r\nimport FPS from \"./FPS\";\r\n\r\nimport '../style/Setting.css';\r\n\r\ninterface Setting_P {\r\n    MaxParticles: number\r\n    setMaxParticles: React.Dispatch<React.SetStateAction<number>>\r\n    Filter: string\r\n    setFilter: React.Dispatch<React.SetStateAction<string>>\r\n}\r\nfunction Setting(props: Setting_P) {\r\n    return (\r\n        <div className=\"Setting\">\r\n            <div>\r\n                <span>Particles</span> <input type=\"number\" defaultValue={props.MaxParticles} onChange={(e) => props.setMaxParticles(parseInt(e.target.value))} />\r\n            </div>\r\n            <div>\r\n                <span>Filter</span> \r\n                <select onChange={(e) => props.setFilter(e.target.value)}>\r\n                    <option value=\"normal\">normal</option>\r\n                    <option value=\"color-dodge\">color-dodge</option>\r\n                    <option value=\"screen\">screen</option>\r\n                    <option value=\"exclusion\">exclusion</option>\r\n                </select>\r\n            </div>\r\n            <div style={{textAlign: 'left'}}>\r\n                <span>FPS </span> <FPS />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import React, { useState } from \"react\";\nimport Fire from \"./Fire\";\nimport Setting from \"./Setting\";\n\nfunction Main() {\n\tconst [MaxParticles, setMaxParticles] = useState<number>(150);\n\tconst [Filter, setFilter] = useState<string>(\"normal\");\n\n\n\treturn (\n\t\t<>\n\t\t\t<Fire MaxParticles={MaxParticles} Filter={Filter} />\n\t\t\t<Setting MaxParticles={MaxParticles} setMaxParticles={setMaxParticles} Filter={Filter} setFilter={setFilter} />\n\t\t</>\n\t)\n}\n\nexport default Main;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport Main from './component/Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}